import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Helmet } from 'react-helmet-async';
import { Link } from 'react-router-dom';
import { Hash, Search, FileText, Video, Package, TrendingUp } from 'lucide-react';
import { tagService } from '../services/api';
import Card from '../components/UI/Card';
import TagChip from '../components/UI/TagChip';
import { useTheme } from '../contexts/ThemeContext';

interface Tag {
  id: number;
  name: string;
  slug: string;
  description: string | null;
  articles_count?: number;
  videos_count?: number;
  products_count?: number;
  total_count?: number;
}

const TagsList: React.FC = () => {
  const { isDarkMode } = useTheme();
  const [tags, setTags] = useState<Tag[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');

  // DEBUG: Component mounted - REMOVED TO PREVENT INFINITE LOOP
  // console.log('🔍 [TagsList] Component mounted!');
  // window.alert('🔍 [TagsList] Component mounted!');
  // document.title = 'DEBUG: TagsList Component Loaded';

  useEffect(() => {
    const fetchTags = async () => {
      try {
        setLoading(true);
        console.log('🔍 [TagsList] Fetching tags with params:', {
          search: searchQuery,
          sortBy: 'name',
          sortOrder: 'asc',
          per_page: 100,
        });
        
        // Alert for debugging - using multiple methods
        console.log('🔍 [TagsList] Starting to fetch tags...');
        // window.alert('🔍 [TagsList] Starting to fetch tags...'); // REMOVED TO PREVENT LOOP
        // document.title = 'DEBUG: Starting fetch tags...'; // REMOVED TO PREVENT LOOP
        
        // Test API URL directly
        console.log('🔍 [TagsList] API URL:', 'http://103.252.93.249/api/tags');
        
        const response = await tagService.getAll({
          search: searchQuery,
          sortBy: 'name',
          sortOrder: 'asc',
          per_page: 100,
        });

        console.log('🔍 [TagsList] Raw response:', response);
        console.log('🔍 [TagsList] Response type:', typeof response);
        
        // Alert with response info
        console.log('🔍 [TagsList] Got response:', response);
        // window.alert(`🔍 [TagsList] Got response: ${JSON.stringify(response).substring(0, 200)}...`); // REMOVED TO PREVENT LOOP
        
        if (response && Array.isArray(response)) {
          // Direct array response
          setTags(response);
          console.log('🔍 [TagsList] Set tags from direct array:', response.length);
          // alert(`🔍 [TagsList] Set ${response.length} tags from direct array`); // REMOVED TO PREVENT LOOP
        } else if (response && typeof response === 'object' && 'data' in response && Array.isArray((response as any).data)) {
          // Wrapped response
          setTags((response as any).data);
          console.log('🔍 [TagsList] Set tags from wrapped data:', (response as any).data.length);
          // alert(`🔍 [TagsList] Set ${(response as any).data.length} tags from wrapped data`); // REMOVED TO PREVENT LOOP
        } else {
          console.warn('🔍 [TagsList] Unexpected response format:', response);
          // alert(`🔍 [TagsList] Unexpected response format: ${JSON.stringify(response).substring(0, 100)}...`); // REMOVED TO PREVENT LOOP
          setTags([]);
        }
      } catch (error) {
        console.error('🔍 [TagsList] Error fetching tags:', error);
        // alert(`🔍 [TagsList] ERROR: ${error}`); // REMOVED TO PREVENT LOOP
        console.log('🔍 [TagsList] Error details:', {
          message: (error as Error).message,
          stack: (error as Error).stack,
          name: (error as Error).name
        });
        setTags([]);
      } finally {
        setLoading(false);
      }
    };
    
    fetchTags();
  }, [searchQuery]);

  // Get popular tags (top 10 by content count)
  const popularTags = [...tags]
    .sort((a, b) => (b.total_count || 0) - (a.total_count || 0))
    .slice(0, 10);

  return (
    <>
      <Helmet>
        <title>Browse Tags - Green Groves</title>
        <meta 
          name="description" 
          content="Browse all tags to discover gardening techniques, videos, and products organized by topics at Green Groves." 
        />
        <meta name="keywords" content="gardening tags, topics, categories, organic farming, indoor plants" />
        <link rel="canonical" href={`${window.location.origin}/tags`} />
      </Helmet>

      <div className={`min-h-screen ${isDarkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Header */}
          <div className="text-center mb-12">
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-r from-emerald-500 to-emerald-600 mb-6">
              <Hash className="w-10 h-10 text-white" />
            </div>
            <h1 className={`text-4xl md:text-5xl font-bold mb-4 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
              Browse Tags
            </h1>
            <p className={`text-lg max-w-2xl mx-auto ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              Discover content organized by topics and interests
            </p>
          </div>

          {/* Search */}
          <div className="mb-8">
            <Card className={`p-4 ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
              <div className="relative">
                <Search className={`absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />
                <input
                  type="text"
                  placeholder="Search tags..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className={`w-full pl-12 pr-4 py-3 rounded-lg border focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                  }`}
                />
              </div>
            </Card>
          </div>

          {/* Popular Tags Section */}
          {popularTags.length > 0 && !searchQuery && (
            <div className="mb-12">
              <Card className={`p-6 ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
                <div className="flex items-center space-x-2 mb-4">
                  <TrendingUp className="w-5 h-5 text-emerald-500" />
                  <h2 className={`text-xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                    Popular Tags
                  </h2>
                </div>
                <div className="flex flex-wrap gap-3">
                  {popularTags.map((tag) => (
                    <div key={tag.id} className="relative">
                      <TagChip
                        id={tag.id}
                        name={tag.name}
                        slug={tag.slug}
                        size="large"
                      />
                      {tag.total_count && tag.total_count > 0 && (
                        <span className={`ml-2 text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                          ({tag.total_count})
                        </span>
                      )}
                    </div>
                  ))}
                </div>
              </Card>
            </div>
          )}

          {/* All Tags Grid */}
          <div>
            <h2 className={`text-2xl font-bold mb-6 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
              {searchQuery ? 'Search Results' : 'All Tags'}
            </h2>

            {loading ? (
              <Card className={`p-12 text-center ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-500 mx-auto mb-4"></div>
                <p className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>Loading tags...</p>
              </Card>
            ) : tags.length === 0 ? (
              <Card className={`p-12 text-center ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
                <Hash className={`w-16 h-16 mx-auto mb-4 ${isDarkMode ? 'text-gray-600' : 'text-gray-400'}`} />
                <p className={`text-lg font-semibold mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  {searchQuery ? 'No tags found' : 'No tags available'}
                </p>
                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  {searchQuery ? 'Try adjusting your search' : 'Tags will appear here once created'}
                </p>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {tags.map((tag) => (
                  <Link key={tag.id} to={`/tags/${tag.slug}`} className="block h-full">
                    <Card 
                      className={`p-6 h-full transition-all duration-200 hover:shadow-lg ${
                          isDarkMode 
                            ? 'bg-gray-800 hover:bg-gray-750' 
                            : 'bg-white hover:bg-gray-50'
                        }`}
                      >
                        <div className="flex items-start justify-between mb-3">
                          <TagChip
                            id={tag.id}
                            name={tag.name}
                            slug={tag.slug}
                            clickable={false}
                            size="medium"
                          />
                        </div>

                        {tag.description && (
                          <p className={`text-sm mb-4 line-clamp-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                            {tag.description}
                          </p>
                        )}

                        <div className="flex items-center space-x-4 text-sm">
                          {tag.articles_count !== undefined && tag.articles_count > 0 && (
                            <div className="flex items-center space-x-1 text-blue-600 dark:text-blue-400">
                              <FileText className="w-4 h-4" />
                              <span>{tag.articles_count}</span>
                            </div>
                          )}
                          {tag.videos_count !== undefined && tag.videos_count > 0 && (
                            <div className="flex items-center space-x-1 text-red-600 dark:text-red-400">
                              <Video className="w-4 h-4" />
                              <span>{tag.videos_count}</span>
                            </div>
                          )}
                          {tag.products_count !== undefined && tag.products_count > 0 && (
                            <div className="flex items-center space-x-1 text-purple-600 dark:text-purple-400">
                              <Package className="w-4 h-4" />
                              <span>{tag.products_count}</span>
                            </div>
                          )}
                          {tag.total_count === 0 && (
                            <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>
                              No content yet
                            </span>
                          )}
                        </div>
                      </Card>
                  </Link>
                ))}
              </div>
            )}
          </div>

          {/* Breadcrumbs */}
          <nav className={`mt-12 text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
            <Link to="/" className="hover:text-emerald-500 transition-colors">
              Home
            </Link>
            <span className="mx-2">/</span>
            <span className={isDarkMode ? 'text-gray-300' : 'text-gray-900'}>Tags</span>
          </nav>
        </div>
      </div>
    </>
  );
};

export default TagsList;

